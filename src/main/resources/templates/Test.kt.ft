package ${packageName}

import io.mockk.every
import io.mockk.mockk
import io.mockk.verify
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.assertThrows
import org.springframework.data.domain.PageImpl
import org.springframework.data.domain.PageRequest
import java.util.Optional
import javax.persistence.EntityNotFoundException
<#if imports??>
${imports}
</#if>

/**
 * Unit tests for [${serviceImplName!"${entityName}ServiceImpl"}].
 */
class ${testClassName!"${serviceName}Test"} {

    private lateinit var ${repositoryVarName}: ${repositoryName}
    private lateinit var ${mapperVarName}: ${mapperName}
    private lateinit var ${serviceVarName}: ${serviceName}

    @BeforeEach
    fun setUp() {
        ${repositoryVarName} = mockk()
        ${mapperVarName} = mockk()
        ${serviceVarName} = ${serviceImplName!"${entityName}ServiceImpl"}(${repositoryVarName}, ${mapperVarName})
    }

    @Test
    fun `should save ${entityName}`() {
        // Given
        val ${entityVarName}DTO = create${entityName}DTO()
        val ${entityVarName} = create${entityName}()

        every { ${mapperVarName}.toEntity(any()) } returns ${entityVarName}
        every { ${repositoryVarName}.save(any()) } returns ${entityVarName}
        every { ${mapperVarName}.toDto(any()) } returns ${entityVarName}DTO

        // When
        val result = ${serviceVarName}.save(${entityVarName}DTO)

        // Then
        assert(result == ${entityVarName}DTO)
        verify { ${mapperVarName}.toEntity(${entityVarName}DTO) }
        verify { ${repositoryVarName}.save(${entityVarName}) }
        verify { ${mapperVarName}.toDto(${entityVarName}) }
    }

    @Test
    fun `should update ${entityName}`() {
        // Given
        val ${entityVarName}DTO = create${entityName}DTO()
        val ${entityVarName} = create${entityName}()

        every { ${repositoryVarName}.existsById(any()) } returns true
        every { ${mapperVarName}.toEntity(any()) } returns ${entityVarName}
        every { ${repositoryVarName}.save(any()) } returns ${entityVarName}
        every { ${mapperVarName}.toDto(any()) } returns ${entityVarName}DTO

        // When
        val result = ${serviceVarName}.update(${entityVarName}DTO)

        // Then
        assert(result == ${entityVarName}DTO)
        verify { ${repositoryVarName}.existsById(any()) }
        verify { ${mapperVarName}.toEntity(${entityVarName}DTO) }
        verify { ${repositoryVarName}.save(${entityVarName}) }
        verify { ${mapperVarName}.toDto(${entityVarName}) }
    }

    @Test
    fun `should throw exception when updating non-existing ${entityName}`() {
        // Given
        val ${entityVarName}DTO = create${entityName}DTO()
        ${entityVarName}DTO.id = ${idValue}

        every { ${repositoryVarName}.existsById(${idValue}) } returns false

        // When & Then
        assertThrows<EntityNotFoundException> {
            ${serviceVarName}.update(${entityVarName}DTO)
        }

        verify { ${repositoryVarName}.existsById(${idValue}) }
    }

    @Test
    fun `should find all ${entityName}s`() {
        // Given
        val pageable = PageRequest.of(0, 10)
        val ${entityVarName}List = listOf(create${entityName}())
        val ${entityVarName}Page = PageImpl(${entityVarName}List, pageable, 1)
        val ${entityVarName}DTOList = listOf(create${entityName}DTO())
        val ${entityVarName}DTOPage = PageImpl(${entityVarName}DTOList, pageable, 1)

        every { ${repositoryVarName}.findAll(pageable) } returns ${entityVarName}Page
        every { ${mapperVarName}.toDto(any<${entityName}>()) } returns create${entityName}DTO()

        // When
        val result = ${serviceVarName}.findAll(pageable)

        // Then
        assert(result.content.size == 1)
        verify { ${repositoryVarName}.findAll(pageable) }
    }

    @Test
    fun `should find one ${entityName}`() {
        // Given
        val id = 1L
        val ${entityVarName} = create${entityName}()
        val ${entityVarName}DTO = create${entityName}DTO()

        every { ${repositoryVarName}.findById(id) } returns Optional.of(${entityVarName})
        every { ${mapperVarName}.toDto(${entityVarName}) } returns ${entityVarName}DTO

        // When
        val result = ${serviceVarName}.findOne(id)

        // Then
        assert(result == ${entityVarName}DTO)
        verify { ${repositoryVarName}.findById(id) }
        verify { ${mapperVarName}.toDto(${entityVarName}) }
    }

    @Test
    fun `should throw exception when finding non-existing ${entityName}`() {
        // Given
        every { ${repositoryVarName}.findById(${idValue}) } returns Optional.empty()

        // When & Then
        assertThrows<EntityNotFoundException> {
            ${serviceVarName}.findOne(${idValue})
        }

        verify { ${repositoryVarName}.findById(${idValue}) }
    }

    @Test
    fun `should delete ${entityName}`() {
        // Given
        val id = 1L

        every { ${repositoryVarName}.deleteById(id) } returns Unit

        // When
        ${serviceVarName}.delete(id)

        // Then
        verify { ${repositoryVarName}.deleteById(id) }
    }

    private fun create${entityName}(): ${entityName} {
        return ${entityName}().apply {
            // Set test data
        }
    }

    private fun create${entityName}DTO(): ${dtoName} {
        return ${dtoName}(
            id = 1L
            // Add other fields as needed
        )
    }

<#if customMethods?? && customMethods != "">
${customMethods}
</#if>
}
