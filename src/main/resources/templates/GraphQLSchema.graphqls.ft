# GraphQL Schema for ${className}
# Generated by Spring API Generator Plugin

# Custom scalars for better type safety
scalar Date
scalar DateTime
scalar BigDecimal
scalar UUID

# ${className} type definition
type ${className} {
    id: ID!
<#if graphqlFields?? && graphqlFields != "">
${graphqlFields}
<#else>
    # Add your fields here
</#if>
}

# Input type for creating a new ${className}
input Create${className}Input {
<#if createInputFields?? && createInputFields != "">
${createInputFields}
<#else>
    # Add your input fields here
</#if>
}

# Input type for updating an existing ${className}
input Update${className}Input {
<#if updateInputFields?? && updateInputFields != "">
${updateInputFields}
<#else>
    # Add your update fields here
</#if>
}

# Root Query type
type Query {
    # Get a single ${className} by ID
    ${entityNameLower}(id: ID!): ${className}

    # Get all ${className}s with pagination
    ${entityNameLower}s(
        page: Int = 0
        size: Int = 20
        sort: String = "id"
        direction: SortDirection = ASC
    ): ${className}Page!

    # Search ${className}s by criteria
    search${className}s(
        query: String
        page: Int = 0
        size: Int = 20
    ): ${className}Page!

    # Count total ${className}s
    count${className}s: Int!
}

# Root Mutation type
type Mutation {
    # Create a new ${className}
    create${className}(input: Create${className}Input!): ${className}!

    # Update an existing ${className}
    update${className}(id: ID!, input: Update${className}Input!): ${className}!

    # Delete a ${className}
    delete${className}(id: ID!): Boolean!
}

# Pagination wrapper for ${className}
type ${className}Page {
    content: [${className}!]!
    totalElements: Int!
    totalPages: Int!
    size: Int!
    number: Int!
    first: Boolean!
    last: Boolean!
}

# Sort direction enum
enum SortDirection {
    ASC
    DESC
}

<#if additionalTypes?? && additionalTypes != "">
${additionalTypes}
<#else>
# Additional types will be generated based on relationships
</#if>
