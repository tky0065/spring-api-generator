package ${packageName};

<#-- Generate imports based on relationships -->
<#list relationshipImports as import>
import ${import};
</#list>

/**
 * ${className} entity with enhanced bidirectional relationship management.
 * Generated by Spring API Generator with automatic relationship synchronization.
 */
${helpers.annotation("Entity")}
${helpers.annotation("Table", "name = \"${tableName}\"")}
public class ${className} {

    <#-- Generate ID field -->
    ${helpers.annotation("Id")}
    ${helpers.annotation("GeneratedValue")}
    private ${idType} id;

    <#-- Generate regular fields -->
    <#list fields as field>
    <#if field.relationType == "NONE">
    <#if helpers.validation??>
        <#if field.nullable == false>
    ${helpers.validation("notNull")}
        </#if>
        <#if field.type == "String">
    ${helpers.validation("notBlank")}
        </#if>
    </#if>
    ${helpers.annotation("Column")}
    private ${field.type} ${helpers.field.adaptName(field.name)};
    </#if>
    </#list>

    <#-- Generate relationship fields with proper annotations -->
    <#list relationships as relationship>
    <#if relationship.relationType == "ONE_TO_MANY">
    ${helpers.jpa("oneToMany", "mappedBy = \"${relationship.mappedBy}\", cascade = CascadeType.ALL")}
    private List<${relationship.targetEntity?split(".")?last}> ${helpers.field.adaptName(relationship.fieldName)} = new ArrayList<>();

    <#elseif relationship.relationType == "MANY_TO_ONE">
    ${helpers.jpa("manyToOne")}
    ${helpers.jpa("joinColumn", "name = \"${relationship.fieldName}_id\"")}
    private ${relationship.targetEntity?split(".")?last} ${helpers.field.adaptName(relationship.fieldName)};

    <#elseif relationship.relationType == "ONE_TO_ONE">
    ${helpers.jpa("oneToOne", "cascade = CascadeType.ALL")}
    <#if relationship.isOwnerSide>
    ${helpers.jpa("joinColumn", "name = \"${relationship.fieldName}_id\"")}
    <#else>
    ${helpers.jpa("oneToOne", "mappedBy = \"${relationship.mappedBy}\"")}
    </#if>
    private ${relationship.targetEntity?split(".")?last} ${helpers.field.adaptName(relationship.fieldName)};

    <#elseif relationship.relationType == "MANY_TO_MANY">
    <#if relationship.isOwnerSide>
    ${helpers.jpa("manyToMany")}
    @JoinTable(
        name = "${relationship.joinTable}",
        joinColumns = @JoinColumn(name = "${relationship.joinColumns[0]}"),
        inverseJoinColumns = @JoinColumn(name = "${relationship.inverseJoinColumns[0]}")
    )
    <#else>
    ${helpers.jpa("manyToMany", "mappedBy = \"${relationship.mappedBy}\"")}
    </#if>
    private Set<${relationship.targetEntity?split(".")?last}> ${helpers.field.adaptName(relationship.fieldName)} = new HashSet<>();
    </#if>
    </#list>

    <#-- Generate constructors -->
    public ${className}() {}

    public ${className}(<#list fields as field><#if field.relationType == "NONE">${field.type} ${field.name}<#if field?has_next>, </#if></#if></#list>) {
        <#list fields as field>
        <#if field.relationType == "NONE">
        this.${helpers.field.adaptName(field.name)} = ${field.name};
        </#if>
        </#list>
    }

    <#-- Generate standard getters and setters for regular fields -->
    <#list fields as field>
    <#if field.relationType == "NONE">
    public ${field.type} ${helpers.field.getterName(field.name)}() {
        return ${helpers.field.adaptName(field.name)};
    }

    public void ${helpers.field.setterName(field.name)}(${field.type} ${field.name}) {
        this.${helpers.field.adaptName(field.name)} = ${field.name};
    }
    </#if>
    </#list>

    <#-- Generate ID getter and setter -->
    public ${idType} getId() {
        return id;
    }

    public void setId(${idType} id) {
        this.id = id;
    }

    <#-- Generate enhanced relationship methods -->
    <#list relationships as relationship>
    <#assign fieldName = helpers.field.adaptName(relationship.fieldName)>
    <#assign targetType = relationship.targetEntity?split(".")?last>

    <#-- Standard getter -->
    public <#if relationship.relationType == "ONE_TO_MANY" || relationship.relationType == "MANY_TO_MANY">
        <#if relationship.relationType == "ONE_TO_MANY">List<${targetType}><#else>Set<${targetType}></#if>
    <#else>
        ${targetType}
    </#if> ${helpers.field.getterName(relationship.fieldName)}() {
        return ${fieldName};
    }

    <#-- Enhanced setter with bidirectional sync -->
    <#if bidirectionalSyncMethods[relationship.fieldName]??>
        <#assign syncMethod = bidirectionalSyncMethods[relationship.fieldName]>

        <#-- Add method for collections -->
        <#if syncMethod.addMethod?has_content>
    ${syncMethod.addMethod}
        </#if>

        <#-- Remove method for collections -->
        <#if syncMethod.removeMethod?has_content>
    ${syncMethod.removeMethod}
        </#if>

        <#-- Set method for single relationships -->
        <#if syncMethod.setMethod?has_content>
    ${syncMethod.setMethod}
        </#if>

        <#-- Clear method for collections -->
        <#if syncMethod.clearMethod?has_content>
    ${syncMethod.clearMethod}
        </#if>
    <#else>
        <#-- Standard setter if no sync methods -->
        <#if relationship.relationType == "ONE_TO_ONE" || relationship.relationType == "MANY_TO_ONE">
    public void ${helpers.field.setterName(relationship.fieldName)}(${targetType} ${relationship.fieldName}) {
        this.${fieldName} = ${relationship.fieldName};
    }
        </#if>
    </#if>
    </#list>

    <#-- Generate relationship helper methods -->
    <#if relationshipHelperMethods?has_content>
    // Relationship helper methods
    ${relationshipHelperMethods}
    </#if>

    <#-- Generate cascade handling methods -->
    <#if cascadeHandlingMethods?has_content>
    // Cascade handling methods
    ${cascadeHandlingMethods}
    </#if>

    <#-- Generate equals and hashCode -->
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        ${className} that = (${className}) obj;
        return Objects.equals(id, that.id);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id);
    }

    <#-- Generate toString with relationship awareness -->
    @Override
    public String toString() {
        return "${className}{" +
            "id=" + id +
            <#list fields as field>
            <#if field.relationType == "NONE">
            ", ${field.name}=" + ${helpers.field.adaptName(field.name)} +
            </#if>
            </#list>
            <#list relationships as relationship>
            <#if relationship.relationType == "ONE_TO_ONE" || relationship.relationType == "MANY_TO_ONE">
            ", ${relationship.fieldName}=" + (${helpers.field.adaptName(relationship.fieldName)} != null ? ${helpers.field.adaptName(relationship.fieldName)}.getId() : null) +
            <#elseif relationship.relationType == "ONE_TO_MANY" || relationship.relationType == "MANY_TO_MANY">
            ", ${relationship.fieldName}Count=" + (${helpers.field.adaptName(relationship.fieldName)} != null ? ${helpers.field.adaptName(relationship.fieldName)}.size() : 0) +
            </#if>
            </#list>
            "}";
    }
}
