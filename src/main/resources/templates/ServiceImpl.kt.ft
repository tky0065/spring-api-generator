package ${packageName}

import ${servicePackage}.${serviceName}
import ${dtoPackage}.${dtoName}
import ${repositoryPackage}.${repositoryName}
import ${mapperPackage}.${mapperName}
import org.springframework.data.domain.Page
import org.springframework.data.domain.Pageable
import org.springframework.stereotype.Service
import org.springframework.transaction.annotation.Transactional
import org.slf4j.LoggerFactory
import java.util.*

/**
 * Service Implementation for managing [${entityName}].
 */
@Service
@Transactional
class ${serviceImplName}(
    private val ${repositoryVarName}: ${repositoryName},
    private val ${mapperVarName}: ${mapperName}
) : ${serviceName} {

    private val log = LoggerFactory.getLogger(${serviceImplName}::class.java)

    override fun save(${entityNameLower}DTO: ${dtoName}): ${dtoName} {
        log.debug("Request to save ${entityName} : {}", ${entityNameLower}DTO)
        val ${entityNameLower} = ${mapperVarName}.toEntity(${entityNameLower}DTO)
        val result = ${repositoryVarName}.save(${entityNameLower})
        return ${mapperVarName}.toDto(result)
    }

    override fun update(${entityNameLower}DTO: ${dtoName}): ${dtoName} {
        log.debug("Request to update ${entityName} : {}", ${entityNameLower}DTO)
        val ${entityNameLower} = ${mapperVarName}.toEntity(${entityNameLower}DTO)
        val result = ${repositoryVarName}.save(${entityNameLower})
        return ${mapperVarName}.toDto(result)
    }

    override fun partialUpdate(${entityNameLower}DTO: ${dtoName}): Optional<${dtoName}> {
        log.debug("Request to partially update ${entityName} : {}", ${entityNameLower}DTO)

        return ${repositoryVarName}.findById(${entityNameLower}DTO.id!!)
            .map { existing${entityName} ->
                ${mapperVarName}.partialUpdate(existing${entityName}, ${entityNameLower}DTO)
                existing${entityName}
            }
            .map { ${repositoryVarName}.save(it) }
            .map { ${mapperVarName}.toDto(it) }
    }

    @Transactional(readOnly = true)
    override fun findAll(): List<${dtoName}> {
        log.debug("Request to get all ${entityName}s")
        return ${repositoryVarName}.findAll()
            .map { ${mapperVarName}.toDto(it) }
    }

    @Transactional(readOnly = true)
    override fun findAll(pageable: Pageable): Page<${dtoName}> {
        log.debug("Request to get all ${entityName}s with pagination")
        return ${repositoryVarName}.findAll(pageable)
            .map { ${mapperVarName}.toDto(it) }
    }

    @Transactional(readOnly = true)
    override fun findOne(id: ${idType}): Optional<${dtoName}> {
        log.debug("Request to get ${entityName} : {}", id)
        return ${repositoryVarName}.findById(id)
            .map { ${mapperVarName}.toDto(it) }
    }

    override fun delete(id: ${idType}) {
        log.debug("Request to delete ${entityName} : {}", id)
        ${repositoryVarName}.deleteById(id)
    }

    @Transactional(readOnly = true)
    override fun count(): Long {
        log.debug("Request to count ${entityName}s")
        return ${repositoryVarName}.count()
    }

    @Transactional(readOnly = true)
    override fun existsById(id: ${idType}): Boolean {
        log.debug("Request to check if ${entityName} exists : {}", id)
        return ${repositoryVarName}.existsById(id)
    }

<#if customMethods?? && customMethods != "">
${customMethods}
</#if>
}
