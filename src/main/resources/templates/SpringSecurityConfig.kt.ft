package ${packageName!"${basePackage}.config.security"}

import jakarta.servlet.FilterChain
import jakarta.servlet.ServletException
import jakarta.servlet.http.HttpServletRequest
import jakarta.servlet.http.HttpServletResponse
import org.springframework.context.annotation.Bean
import org.springframework.context.annotation.Configuration
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity
import org.springframework.security.config.annotation.web.builders.HttpSecurity
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity
import org.springframework.security.config.http.SessionCreationPolicy
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder
import org.springframework.security.crypto.password.PasswordEncoder
import org.springframework.security.web.SecurityFilterChain
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter
import org.springframework.web.filter.OncePerRequestFilter
import java.io.IOException
<#if imports??>
${imports}
</#if>

/**
 * Spring Security configuration.
 *
 * Generated on ${currentDate?datetime!"now"} by Spring API Generator Plugin.
 */
@Configuration
@EnableWebSecurity
@EnableMethodSecurity
class ${className!"SecurityConfig"}(private val jwtUtil: JwtUtil) {

    @Bean
    fun securityFilterChain(http: HttpSecurity): SecurityFilterChain {
        return http
            .csrf { it.disable() }
            .sessionManagement { it.sessionCreationPolicy(SessionCreationPolicy.STATELESS) }
            .authorizeHttpRequests { auth ->
                auth
                    .requestMatchers("/api/auth/**").permitAll()
                    .requestMatchers("/swagger-ui/**").permitAll()
                    .requestMatchers("/v3/api-docs/**").permitAll()
                    .requestMatchers("/api/${entityApiPath!"entities"}/**").authenticated()
                    .anyRequest().authenticated()
            }
            .addFilterBefore(jwtAuthenticationFilter(), UsernamePasswordAuthenticationFilter::class.java)
            .build()
    }

    @Bean
    fun passwordEncoder(): PasswordEncoder {
        return BCryptPasswordEncoder()
    }

    @Bean
    fun jwtAuthenticationFilter(): JwtAuthenticationFilter {
        return JwtAuthenticationFilter(jwtUtil)
    }

    /**
     * JWT Authentication Filter for processing JWT tokens.
     */
    class JwtAuthenticationFilter(private val jwtUtil: JwtUtil) : OncePerRequestFilter() {

        @Throws(ServletException::class, IOException::class)
        override fun doFilterInternal(
            request: HttpServletRequest,
            response: HttpServletResponse,
            filterChain: FilterChain
        ) {
            val token = extractTokenFromRequest(request)
            if (token != null && jwtUtil.validateToken(token)) {
                val username = jwtUtil.getUsernameFromToken(token)
                // Set authentication in SecurityContext
                // Implementation depends on your UserDetailsService
            }
            filterChain.doFilter(request, response)
        }

        private fun extractTokenFromRequest(request: HttpServletRequest): String? {
            val authHeader = request.getHeader("Authorization")
            return if (authHeader != null && authHeader.startsWith("Bearer ")) {
                authHeader.substring(7)
            } else null
        }
    }

<#if customMethods?? && customMethods != "">
${customMethods}
</#if>
}
