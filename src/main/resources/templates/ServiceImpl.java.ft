package ${packageName}.service.impl;

import ${packageName}.domain.${entityName};
import ${packageName}.dto.${entityName}DTO;
import ${packageName}.repository.${entityName}Repository;
import ${packageName}.service.${entityName}Service;
import ${packageName}.mapper.${entityName}Mapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.LinkedList;
import java.util.List;
import java.util.stream.Collectors;

/**
 * Service Implementation for managing {@link ${entityName}}.
 */
@Service
@Transactional
public class ${entityName}ServiceImpl implements ${entityName}Service {

    private final Logger log = LoggerFactory.getLogger(${entityName}ServiceImpl.class);

    private final ${entityName}Repository ${entityNameLower}Repository;
    private final ${entityName}Mapper ${entityNameLower}Mapper;

    public ${entityName}ServiceImpl(${entityName}Repository ${entityNameLower}Repository, ${entityName}Mapper ${entityNameLower}Mapper) {
        this.${entityNameLower}Repository = ${entityNameLower}Repository;
        this.${entityNameLower}Mapper = ${entityNameLower}Mapper;
    }

    /**
     * Save a ${entityNameLower}.
     *
     * @param ${entityNameLower}DTO the entity to save.
     * @return the persisted entity.
     */
    @Override
    public ${entityName}DTO save(${entityName}DTO ${entityNameLower}DTO) {
        log.debug("Request to save ${entityName} : {}", ${entityNameLower}DTO);
        ${entityName} ${entityNameLower} = ${entityNameLower}Mapper.toEntity(${entityNameLower}DTO);
        ${entityNameLower} = ${entityNameLower}Repository.save(${entityNameLower});
        return ${entityNameLower}Mapper.toDto(${entityNameLower});
    }

    /**
     * Update a ${entityNameLower}.
     *
     * @param ${entityNameLower}DTO the entity to update.
     * @return the persisted entity.
     */
    @Override
    public ${entityName}DTO update(${entityName}DTO ${entityNameLower}DTO) {
        log.debug("Request to update ${entityName} : {}", ${entityNameLower}DTO);
        ${entityName} ${entityNameLower} = ${entityNameLower}Mapper.toEntity(${entityNameLower}DTO);
        ${entityNameLower} = ${entityNameLower}Repository.save(${entityNameLower});
        return ${entityNameLower}Mapper.toDto(${entityNameLower});
    }

    /**
     * Get all the ${entityNameLower}s.
     *
     * @return the list of entities.
     */
    @Override
    @Transactional(readOnly = true)
    public List<${entityName}DTO> findAll() {
        log.debug("Request to get all ${entityName}s");
        return ${entityNameLower}Repository.findAll().stream()
            .map(${entityNameLower}Mapper::toDto)
            .collect(Collectors.toCollection(LinkedList::new));
    }

    /**
     * Get one ${entityNameLower} by id.
     *
     * @param id the id of the entity.
     * @return the entity.
     */
    @Override
    @Transactional(readOnly = true)
    public ${entityName}DTO findOne(${idType} id) {
        log.debug("Request to get ${entityName} : {}", id);
        return ${entityNameLower}Repository.findById(id)
            .map(${entityNameLower}Mapper::toDto)
            .orElseThrow(() -> new RuntimeException("Entity not found with id " + id));
    }

    /**
     * Delete the ${entityNameLower} by id.
     *
     * @param id the id of the entity.
     */
    @Override
    public void delete(${idType} id) {
        log.debug("Request to delete ${entityName} : {}", id);
        ${entityNameLower}Repository.deleteById(id);
    }
}
