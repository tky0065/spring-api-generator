package ${packageName}

import jakarta.persistence.*
import java.time.LocalDateTime
import java.util.*

/**
 * Abstract base entity with common fields (Kotlin version).
 * Generated by Spring API Generator.
 */
@MappedSuperclass
abstract class AbstractEntity {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    open var id: ${idType}? = null

    @Column(name = "created_at", nullable = false, updatable = false)
    open var createdAt: LocalDateTime = LocalDateTime.now()

    @Column(name = "updated_at")
    open var updatedAt: LocalDateTime = LocalDateTime.now()

    @Column(name = "version")
    @Version
    open var version: Long = 0

    @PrePersist
    protected fun onCreate() {
        val now = LocalDateTime.now()
        createdAt = now
        updatedAt = now
    }

    @PreUpdate
    protected fun onUpdate() {
        updatedAt = LocalDateTime.now()
    }

    /**
     * Checks if this entity is new (not persisted yet).
     */
    fun isNew(): Boolean = id == null

    /**
     * Checks if this entity was created recently (within the last hour).
     */
    fun isRecentlyCreated(): Boolean =
        createdAt.isAfter(LocalDateTime.now().minusHours(1))

    /**
     * Checks if this entity was updated recently (within the last hour).
     */
    fun isRecentlyUpdated(): Boolean =
        updatedAt.isAfter(LocalDateTime.now().minusHours(1))

    override fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (other == null || javaClass != other.javaClass) return false
        other as AbstractEntity
        return id == other.id
    }

    override fun hashCode(): Int = Objects.hash(id)

    override fun toString(): String {
        return "${this::class.simpleName}(id=$id, createdAt=$createdAt, updatedAt=$updatedAt, version=$version)"
    }
}
