package ${packageName};

import ${domainPackage}.${entityName};
import ${dtoPackage}.${dtoName};
import org.mapstruct.BeanMapping;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.MappingTarget;
import org.mapstruct.NullValuePropertyMappingStrategy;
import org.mapstruct.ReportingPolicy;
import org.springframework.data.domain.Page;
import java.util.List;
import java.util.Set;
<#if additionalImports?? && additionalImports != "">
${additionalImports}
</#if>

/**
 * Mapper for the entity {@link ${entityName}} and its DTO {@link ${dtoName}}.
 */
<#if usesMappers?has_content>
@Mapper(componentModel = "spring", uses = {${usesMappers?join(", ")}}, unmappedTargetPolicy = ReportingPolicy.IGNORE)
<#else>
@Mapper(componentModel = "spring", unmappedTargetPolicy = ReportingPolicy.IGNORE)
</#if>
public interface ${mapperName} {

<#if mappings?has_content>
    // Field mappings for relationships
    ${mappings?join("\n    ")}
</#if>

    /**
     * Convert entity to DTO
     * @param entity the entity to convert
     * @return the DTO
     */
    ${dtoName} toDto(${entityName} entity);

    /**
     * Convert list of entities to list of DTOs
     * @param entityList the list of entities
     * @return the list of DTOs
     */
    List<${dtoName}> toDto(List<${entityName}> entityList);

    /**
     * Convert set of entities to set of DTOs
     * @param entitySet the set of entities
     * @return the set of DTOs
     */
    Set<${dtoName}> toDto(Set<${entityName}> entitySet);

    /**
     * Convert DTO to entity
     * @param entityDTO the DTO to convert
     * @return the entity
     */
    ${entityName} toEntity(${dtoName} entityDTO);

    /**
     * Convert list of DTOs to list of entities
     * @param dtoList the list of DTOs
     * @return the list of entities
     */
    List<${entityName}> toEntity(List<${dtoName}> dtoList);

    /**
     * Convert set of DTOs to set of entities
     * @param dtoSet the set of DTOs
     * @return the set of entities
     */
    Set<${entityName}> toEntity(Set<${dtoName}> dtoSet);

    /**
     * Convert page of entities to page of DTOs
     * @param page the page of entities
     * @return the page of DTOs
     */
    default Page<${dtoName}> toDto(Page<${entityName}> page) {
        return page.map(this::toDto);
    }

    /**
     * Partial update method
     * @param entity the entity to update
     * @param dto the DTO with new values
     */
    @BeanMapping(nullValuePropertyMappingStrategy = NullValuePropertyMappingStrategy.IGNORE)
    void partialUpdate(@MappingTarget ${entityName} entity, ${dtoName} dto);

<#if customMethods?? && customMethods != "">
${customMethods}
</#if>
}
