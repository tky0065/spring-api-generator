package ${packageName}

import ${domainPackage}.${entityName}
import ${dtoPackage}.${entityName}DTO
import org.mapstruct.*
import org.springframework.data.domain.Page
<#if additionalImports?? && additionalImports != "">
${additionalImports}
</#if>

/**
 * Mapper for the entity ${entityName} and its DTO ${entityName}DTO.
 */
<#if usesMappers?has_content>
@Mapper(componentModel = "spring", uses = [${usesMappers?join(", ")}])
<#else>
@Mapper(componentModel = "spring")
</#if>
interface ${mapperName} {

<#if mappings?has_content>
    ${mappings?join("\n    ")}
</#if>
    fun toDto(${entityNameLower}: ${entityName}): ${entityName}DTO

    fun toDto(${entityNameLower}List: List<${entityName}>): List<${entityName}DTO>

    fun toDto(${entityNameLower}Set: Set<${entityName}>): Set<${entityName}DTO>

    fun toEntity(${entityNameLower}DTO: ${entityName}DTO): ${entityName}

    fun toEntity(dtoList: List<${entityName}DTO>): List<${entityName}>

    fun toEntity(dtoSet: Set<${entityName}DTO>): Set<${entityName}>

    /**
     * Convert a page of entities to a page of DTOs
     */
    fun toDto(page: Page<${entityName}>): Page<${entityName}DTO> =
        page.map { toDto(it) }

    /**
     * Partial update method
     */
    @BeanMapping(nullValuePropertyMappingStrategy = NullValuePropertyMappingStrategy.IGNORE)
    fun partialUpdate(@MappingTarget entity: ${entityName}, dto: ${entityName}DTO)

<#if customMethods?? && customMethods != "">
${customMethods}
</#if>
}
