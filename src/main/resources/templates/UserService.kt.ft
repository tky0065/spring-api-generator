package ${packageName!"${basePackage}.service"}

import org.springframework.beans.factory.annotation.Autowired
import org.springframework.security.crypto.password.PasswordEncoder
import org.springframework.stereotype.Service
import org.springframework.transaction.annotation.Transactional
import java.util.Optional
<#if imports??>
${imports}
</#if>

/**
 * Service for user management.
 *
 * Generated on ${currentDate?datetime!"now"} by Spring API Generator Plugin.
 */
@Service
class ${className!"UserService"} @Autowired constructor(
    private val ${repositoryVarName!"userRepository"}: ${repositoryName!"UserRepository"},
    private val passwordEncoder: PasswordEncoder
) {

    /**
     * Create a new user with an encoded password.
     *
     * @param user the user to create
     * @return the created user
     * @throws IllegalArgumentException if user with the same username or email already exists
     */
    @Transactional
    fun createUser(user: ${entityName!"User"}): ${entityName!"User"} {
        if (${repositoryVarName!"userRepository"}.existsByUsername(user.username)) {
            throw IllegalArgumentException("Username already exists: \${user.username}")
        }

        if (${repositoryVarName!"userRepository"}.existsByEmail(user.email)) {
            throw IllegalArgumentException("Email already exists: \${user.email}")
        }

        // Encode the password before saving
        val encodedUser = user.copy(password = passwordEncoder.encode(user.password))

        // Add default role if no roles are specified
        val userWithRole = if (encodedUser.role == null) {
            encodedUser.copy(role = ${entityName!"User"}.Role.USER)
        } else {
            encodedUser
        }

        return ${repositoryVarName!"userRepository"}.save(userWithRole)
    }

    /**
     * Update an existing user.
     *
     * @param id the user ID to update
     * @param userDetails the updated user details
     * @return the updated user
     */
    @Transactional
    fun updateUser(id: ${idType!"Long"}, userDetails: ${entityName!"User"}): ${entityName!"User"} {
        val existingUser = ${repositoryVarName!"userRepository"}.findById(id)
            .orElseThrow { NoSuchElementException("User not found with id $id") }

        // Update the fields
        val updatedUser = existingUser.copy(
            email = userDetails.email,
            fullName = userDetails.fullName,
            // Only update password if it's provided and not empty
            password = if (userDetails.password.isNotBlank()) {
                passwordEncoder.encode(userDetails.password)
            } else {
                existingUser.password
            }
        )

        return ${repositoryVarName!"userRepository"}.save(updatedUser)
    }

    /**
     * Find a user by username.
     *
     * @param username the username to search for
     * @return the user if found
     */
    @Transactional(readOnly = true)
    fun findByUsername(username: String): ${entityName!"User"}? {
        return ${repositoryVarName!"userRepository"}.findByUsername(username).orElse(null)
    }

    /**
     * Find a user by email.
     *
     * @param email the email to search for
     * @return the user if found
     */
    @Transactional(readOnly = true)
    fun findByEmail(email: String): ${entityName!"User"}? {
        return ${repositoryVarName!"userRepository"}.findByEmail(email).orElse(null)
    }

    /**
     * Find a user by ID.
     *
     * @param id the user ID to search for
     * @return the user if found
     */
    @Transactional(readOnly = true)
    fun findById(id: ${idType!"Long"}): ${entityName!"User"}? {
        return ${repositoryVarName!"userRepository"}.findById(id).orElse(null)
    }

    /**
     * Get all users.
     *
     * @return list of all users
     */
    @Transactional(readOnly = true)
    fun findAll(): List<${entityName!"User"}> {
        return ${repositoryVarName!"userRepository"}.findAll()
    }

    /**
     * Get all enabled users.
     *
     * @return list of enabled users
     */
    @Transactional(readOnly = true)
    fun findAllEnabled(): List<${entityName!"User"}> {
        return ${repositoryVarName!"userRepository"}.findByEnabledTrue()
    }

    /**
     * Find users by role.
     *
     * @param role the role to filter by
     * @return list of users with the specified role
     */
    @Transactional(readOnly = true)
    fun findByRole(role: ${entityName!"User"}.Role): List<${entityName!"User"}> {
        return ${repositoryVarName!"userRepository"}.findByRole(role)
    }

    /**
     * Delete a user by ID.
     *
     * @param id the user ID to delete
     */
    @Transactional
    fun deleteUser(id: ${idType!"Long"}) {
        if (${repositoryVarName!"userRepository"}.existsById(id)) {
            ${repositoryVarName!"userRepository"}.deleteById(id)
        } else {
            throw NoSuchElementException("User not found with id $id")
        }
    }

    /**
     * Change a user's password.
     *
     * @param userId the user ID
     * @param newPassword the new password
     * @return the updated user
     */
    @Transactional
    fun changePassword(userId: ${idType!"Long"}, newPassword: String): ${entityName!"User"} {
        val user = ${repositoryVarName!"userRepository"}.findById(userId)
            .orElseThrow { NoSuchElementException("User not found with id $userId") }

        val updatedUser = user.copy(password = passwordEncoder.encode(newPassword))
        return ${repositoryVarName!"userRepository"}.save(updatedUser)
    }

    /**
     * Enable or disable a user.
     *
     * @param userId the user ID
     * @param enabled the enabled status
     * @return the updated user
     */
    @Transactional
    fun setUserEnabled(userId: ${idType!"Long"}, enabled: Boolean): ${entityName!"User"} {
        val user = ${repositoryVarName!"userRepository"}.findById(userId)
            .orElseThrow { NoSuchElementException("User not found with id $userId") }

        val updatedUser = user.copy(enabled = enabled)
        return ${repositoryVarName!"userRepository"}.save(updatedUser)
    }

    /**
     * Check if a user exists by username.
     *
     * @param username the username to check
     * @return true if user exists
     */
    @Transactional(readOnly = true)
    fun existsByUsername(username: String): Boolean {
        return ${repositoryVarName!"userRepository"}.existsByUsername(username)
    }

    /**
     * Check if a user exists by email.
     *
     * @param email the email to check
     * @return true if user exists
     */
    @Transactional(readOnly = true)
    fun existsByEmail(email: String): Boolean {
        return ${repositoryVarName!"userRepository"}.existsByEmail(email)
    }

<#if customMethods?? && customMethods != "">
${customMethods}
</#if>
}
